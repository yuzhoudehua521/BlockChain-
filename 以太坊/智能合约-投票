pragma solidity ^0.4.0

contract Ballot{
  
  //投票者数据结构
  struct Voter{
    uint weight;       //权重
    bool voted;        //投票与否
    uint vote;         //投票的提案编号
    address delegate;  //投票的委托对象
  }
  
  //提案
  struct Proposal{
    bytes32 name;       //提案名称
    uint voteCount;     //得票数
  }
  
  //主持人
  address ChairPerson;
  
  //投票者地址与投票状态
  mapping(address => Voter) Voters;
  
  //提案列表
  Proposal[] Proposals;
  
  //给定一个提案名称列表
  function Ballot(bytes32[] proposalNames) {
    Chairperson = msg.sender;
    Voters[Chairperson].weight = 1;
    
    for (uint i = 0; i < proposalNames.length; i++) {
      Proposals.push(Proposal({
        name:proposalNames[i],
        voteCount:0
        }));
     }    
   }
  
  
  //主持人chairperson给voter地址投票权利
  function GiveRightToVote(address voter) public {
    //判断是否投过票和给予投票权利
    require((msg.sender == ChairPerson) && !Voters[voter].voted && (Voters[voter].weight == 0));
    
    //赋予投票权重
    Voters[voter].weight = 1;
  }
     
   //进行投票
   function vote(uint Proposal){
    require(Proposal < Proposal.length);
    
    Voter storage sender = Voters[msg.sender];
    require((!sender.voted) && (sender.weight != 0));
    sender.voted = true;
    sender.vote = proposal;
    
    //统计票数
    proposals[proposal].voteCount += sender.weight;
    }
     
   
     
  //代理投票，投票者将自己投票机会授权另外一个地址
  function Delegate(address to) {
  
    Voter storage sender = Voters[msg.sender];
    require(!sender.voted);
    require(to != msg.sender);
    
    while(Voters[to].delegate != address(0)){
      to = Voters[to].delegate;
      require(to != msg.sender);
     }
     
     sender.voted = true;
     sender.delegate = to;
     Voter storage delegate = Voters[to];
     if(delegate.voted){
      Proposals[delegate.vote].voteCount += sender.weight;
     } else{        
        delegate.weight += sender.weight;
       }
       
     }
     
  
  function WinningProposal() constant returns(uint[] winningProsals){
    uint[] memory temWinner = new uint[](Proposals.length);
    uint winningCount = 0;
    uint winningVoteCount = 0;
    
    for(uint p = 0;p < Proposals.length;p++){
      if(Proposals[p].voteCount > winningVoteCount){
        winningVoteCount = Proposals[p].voteCount;
        
        temWinner[0] = p;
        winningCount = 1;
        } else if(Proposals[p].voteCount == winningVoteCount){
            temWinner[winningCount] = p;
            winningCount ++;
          }
     }
     
     winnerProposals = new uint[](winningCount);
     
     for(uint q = 0;q < winningCount;q++){
        winningProposals[q] = temWinner[q];
     }
     
     return winningProposals;
     
    }
    
    
    funtion WinnerName() constant returns(bytes32[] winnerName){
      uint[] memory winningProposals = winningProposal();
      winnerNames = new bytes32[](winningProposals.length);
      
      for(uint p = 0;p < winningProposals.length;p++){
        winnerNames[p] = proposals[winningProposals[p]].name;
      }
      
      return winnerName;
      }
      
      
    }
      
      
    
    
        
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    
