contract KittyBase is KittyAccessControl {
  

    ///小猫出生时的事件，包括giveBirth和0代猫的创建
    event Birth(address owner, uint256 kittyId, uint256 motherId, uint256 fatherId, uint256 genes);

    /// ERC721定义的转让事件，当kitty的主人变换时调用（包括出生）
    event Transfer(address from, address to, uint256 tokenId);

    /*** 数据类型 ***/

    ///  迷恋猫的数据结构，因为这是每只猫的基本结构，所以设计为恰好两个256位的字
    ///  因为以太坊的编码方案，所以成员的顺序也很重要
    struct Kitty {
        // 迷恋猫的基因是256-bits，并且不会改变
        uint256 genes;

        // 迷恋猫创建时来自区块的时间戳
        uint64 birthTime;

        // 这只猫可以再次生育的最小时间戳
        uint64 cooldownEndBlock;

        // 双亲的ID，0代的双亲ID是0
        // 32位无符号整数看似只能有40亿只猫
        // 但是以太坊每年只能支持5亿次交易，因此未来几年不会出问题
        uint32 motherId;
        uint32 fatherId;

        // 当这只猫是雌性时，0表示没有怀孕，非0表示已经怀孕
        // 主要在生成小猫时获得父亲的基因数据
        uint32 siringWithId;

        // 修养时长的编号，初始值为 generation/2
        // 每次生育，父母都会把编号加一
        uint16 cooldownIndex;

        // 猫的代，创始团队创建的猫是0代，其她猫是双亲最大的代加一
        // 也就是，max(mother.generation, father.generation) + 1
        uint16 generation;
    }

    /*** 常量 ***/

    ///  不同编号的修养时间
    ///  每次生育后差不多翻一倍，从而规避主人不断的用同一只猫生育，最长是1周
    uint32[14] public cooldowns = [
        uint32(1 minutes),
        uint32(2 minutes),
        uint32(5 minutes),
        uint32(10 minutes),
        uint32(30 minutes),
        uint32(1 hours),
        uint32(2 hours),
        uint32(4 hours),
        uint32(8 hours),
        uint32(16 hours),
        uint32(1 days),
        uint32(2 days),
        uint32(4 days),
        uint32(7 days)
    ];

    // 对块之间时间差的估算，大概15秒
    uint256 public secondsPerBlock = 15;

    /*** 持久存储 ***/

    ///  保存所有迷恋猫的数组，ID是索引，
    ///  ID为0是不存在的生物，但又是0代猫的双亲
    Kitty[] kitties;

    ///  从猫的ID到主人的地址的映射
    ///  所有猫都有一个非0地址的主人，包括0代猫
    mapping (uint256 => address) public kittyIndexToOwner;

    //  从主人地址到他拥有的猫的个数的映射
    //  在函数balanceOf()中使用
    mapping (address => uint256) ownershipTokenCount;

    ///  从猫的ID到被允许领养的主人地址的映射，在transferFrom()中使用
    ///  每只猫在任何时候只能有一个被允许的领养者的地址
    ///  0表示没有人被批准
    mapping (uint256 => address) public kittyIndexToApproved;

    ///  从猫的ID到能被一起生育的主人的地址的映射，在breedWith()中使用
    ///  每只猫在任何时候只能有一个被允许一起生育的主人的地址
    ///  0表示没有人被批准
    mapping (uint256 => address) public sireAllowedToAddress;

    ///  ClockAuction协议的地址，用来买卖猫
    ///  这个协议处理了用户之间的买卖以及0代猫的初始买卖
    ///  每15分钟被调用一次
    SaleClockAuction public saleAuction;

    ///  ClockAuction协议的地址，用来交易生育服务
    ///  需要两个交易服务是因为买卖和生育有很多不同
    SiringClockAuction public siringAuction;

    ///  设置一只猫的主人地址
    function _transfer(address _from, address _to, uint256 _tokenId) internal {
        // 因为猫的数量最大是2^32，我们不会溢出
        ownershipTokenCount[_to]++;
        // 设置主人
        kittyIndexToOwner[_tokenId] = _to;
        // 需要规避原来主人是0x0的情况，尽管这个不应该发生
        if (_from != address(0)) {
            ownershipTokenCount[_from]--;
            // 同时清空允许生育的主人地址
            delete sireAllowedToAddress[_tokenId];
            // 同时清空允许领养的主人地址
            delete kittyIndexToApproved[_tokenId];
        }
        // 发出主人转换事件
        Transfer(_from, _to, _tokenId);
    }

    /// 内部方法，创建一只猫，它不做安全检查，因此输入数据要保证正确
    /// 会产生Birth事件和Transfer事件
    /// @param _matronId 母亲ID（0代的母亲是0）
    /// @param _sireId 父亲ID（0代的父亲是0）
    /// @param _generation 这只猫的代，有调用者计算
    /// @param _genes 基因编码
    /// @param _owner 初始主人的地址，非0
    function _createKitty(
        uint256 _motherId,
        uint256 _fatherId,
        uint256 _generation,
        uint256 _genes,
        address _owner
    )
        internal
        returns (uint)
    {
        // 这些require并非必要，因为调用者需要保证正确
        // 但是因为_createKitty()的存储相对昂贵，因此增加检查也有价值
        require(_matronId == uint256(uint32(_matronId)));
        require(_sireId == uint256(uint32(_sireId)));
        require(_generation == uint256(uint16(_generation)));

        // 新猫的修养是代数除以2
        uint16 cooldownIndex = uint16(_generation / 2);
        if (cooldownIndex > 13) {
            cooldownIndex = 13;
        }

        Kitty memory _kitty = Kitty({
            genes: _genes,
            birthTime: uint64(now),
            cooldownEndBlock: 0,
            matronId: uint32(_matronId),
            sireId: uint32(_sireId),
            siringWithId: 0,
            cooldownIndex: cooldownIndex,
            generation: uint16(_generation)
        });
        // ID是递增的
        uint256 newKittenId = kitties.push(_kitty) - 1;

        // 虽然超过40亿只猫不太会发生，但是还是检查一下
        require(newKittenId == uint256(uint32(newKittenId)));

        // 发出Birth事件
        Birth(
            _owner,
            newKittenId,
            uint256(_kitty.matronId),
            uint256(_kitty.sireId),
            _kitty.genes
        );

        // 设置主人，并且发出Transfer事件
        // 遵循ERC721草案
        _transfer(0, _owner, newKittenId);

        return newKittenId;
    }

    // 管理者可以调整每块多少秒
    function setSecondsPerBlock(uint256 secs) external onlyCLevel {
        require(secs < cooldowns[0]);
        secondsPerBlock = secs;
    }
}
