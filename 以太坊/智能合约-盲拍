//分析：
//转账金额（Transaction的value）是公开的，无法禁止别人查看自己出价
//通过混淆竞价，每次出价（加密）可以看到（转账金额），但不是真的出价，最后可以退回。
//真出价会在最后生效，并且在竞拍结束后，有个揭晓期，最终完成盲拍。

pragma solidity ^0.4.0

contract BlindAuction {
    
    //出价数据结构
    struct Bid{
       bytes32 blindedBid;    //加密后出价的‘真伪’
       uint deposit;          //出价时所付的金额
    }
    
    address public beneficiary;
    
    uint public biddingEnd;
    //揭晓期结束的时间
    uint public revealEnd;
    
    bool public ended;
    
    //出价者的屡次出价映射
    mapping(address => Bid[]) public bids;
    
    address public highestBidder;  //当前最高出价者
    uint public highestBid;        //当前最高出价
    
    //退回钱款
    mapping(address => uint) pendingReturns;
    
    event AuctionEnded(address winner, uint highestBid);
    
    //函数修改器，来限制函数执行时间
    modifier onlyBefore(uint _time) { require(now < _time); _; }
    modifier onlyAfter(uint _time) { require(now > _time); _; }
    
    //竞拍时间，揭露时间，受益人地址
    function BlindAuction(uint _biddingTime, uint _revealTime, address _beneficiary) public {
        beneficiary = _beneficiary;
        biddingTime = now + _biddingTime;
        revealEnd = biddingEnd + revealTime;
    }
    
    //出价函数，需要加密后的盲拍出价作为参数，只能在竞拍期结束之前调用
    function bid(bytes32 _blindedBid) public payable onlyBefore(biddingEnd) {
        bids[msg.sender].push(Bid({
            blindedBid: _blindedBid,
            deposit: msg.value
            }));
     }
     
     //揭晓函数，用来揭晓每次出价的‘真伪’，只能在竞拍期结束后，揭晓期结束前
     function reveal(uint[] _values,bool[] _fake,bytes[] _secret) public onlyAfter(biddingEnd) onlyBefore(revealEnd) {
         uint length = bids[msg.sender].length;
         require(_values.length == length);
         require(_fake.length == length);
         require(_secret.length == length);
         
         uint refund;   
         for (uint i = 0;i < length;i++) {
            var bid = bids[msg.sender][i];
            var (value, fake, secret) = ( _values[i],_fake[i],_secret[i])
            if (bid.blindedBid != keccak256(value, fake, secret)) {
                // bid不正确，不会退回押金
                continue;
            }
            refund += bid.deposit;
            if (!fake && bid.deposit >= value) {  // 处理bid超过value的情况
                if (placeBid(msg.sender, value))
                    refund -= value;
            }
            bid.blindedBid = bytes32(0);
         }
        msg.sender.transfer(refund); 
      }
    
    //更新当前最高出价，内置函数，被reveal函数调用
    function placeBid(address bidder, uint value) internal returns (bool success) {
        if (value <= highestBid) {
            return false;
        }
        if (highestBidder != 0) {
            pendingReturns[highestBidder] += highestBid;
        }
        highestBid = value;
        highestBidder = bidder;
        return true;
     }
 
     
     function withdraw() public {
        uint amount = pendingReturns[msg.sender];
        if (amount > 0) {
            // 一定要先置0，规避风险
            pendingReturns[msg.sender] = 0;
            msg.sender.transfer(amount);
        }
     }
    
    // 结束拍卖，把代币发给受益人
    function auctionEnd() public onlyAfter(revealEnd) {
        require(!ended);
        AuctionEnded(highestBidder, highestBid);
        ended = true;
        beneficiary.transfer(highestBid);
    }

}
    
    
    

